[{"name":"#if INTERACTIVE","content":"#nowarn \"21\"\n#if INTERACTIVE","predecessors":[{"$":0,"Item":"106ad00d-ee7e-4948-a022-bf02041d60a7"}],"companions":[],"id":{"$":0,"Item":"0de17a9a-b61d-4bf2-a475-06ad980404ff"},"expanded":true},{"name":"System dlls","content":"#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Web.dll\"\n#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n","predecessors":[{"$":0,"Item":"0de17a9a-b61d-4bf2-a475-06ad980404ff"}],"companions":[],"id":{"$":0,"Item":"4d91e739-77fc-495e-8e01-cda6f26c7835"},"expanded":true},{"name":"WebSharper dlls","content":"#r @\"WebSharper.Core.dll\"\n#r @\"WebSharper.Collections.dll\"\n#r @\"WebSharper.Main.dll\"\n#r @\"WebSharper.UI.Next.dll\"\n#r @\"WebSharper.JavaScript.dll\"\n","predecessors":[{"$":0,"Item":"0de17a9a-b61d-4bf2-a475-06ad980404ff"}],"companions":[],"id":{"$":0,"Item":"e7094a13-7915-4e4a-9eac-b2a225e34a94"},"expanded":true},{"name":"WebSharper.Sitelets.dll","content":"#r @\"WebSharper.Sitelets.dll\"","predecessors":[],"companions":[],"id":{"$":0,"Item":"e39e08cd-7fa4-4b33-9d4d-a3b3baa0b050"},"expanded":true},{"name":"WebSharper UI dlls","content":"#r @\"WebSharper.Web.dll\"\n#r @\"WebSharper.UI.Next.dll\"\n","predecessors":[{"$":0,"Item":"0de17a9a-b61d-4bf2-a475-06ad980404ff"},{"$":0,"Item":"e7094a13-7915-4e4a-9eac-b2a225e34a94"}],"companions":[],"id":{"$":0,"Item":"6ccdcf8b-134a-4689-9785-5bdcb20a8c92"},"expanded":true},{"name":"ZafirTranspiler dlls","content":"#r @\"ZafirTranspiler.dll\"\n","predecessors":[{"$":0,"Item":"0de17a9a-b61d-4bf2-a475-06ad980404ff"}],"companions":[],"id":{"$":0,"Item":"a28fe808-236e-4b7e-9509-51ebe21e35fc"},"expanded":true},{"name":"","content":"#else","predecessors":[{"$":0,"Item":"0de17a9a-b61d-4bf2-a475-06ad980404ff"}],"companions":[],"id":{"$":0,"Item":"66ab3e22-f5ed-4e75-966d-28394d24f3d7"},"expanded":true},{"name":"","content":"namespace Test","predecessors":[{"$":0,"Item":"66ab3e22-f5ed-4e75-966d-28394d24f3d7"}],"companions":[],"id":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"expanded":true},{"name":"","content":"#endif ","predecessors":[],"companions":[],"id":{"$":0,"Item":"106ad00d-ee7e-4948-a022-bf02041d60a7"},"expanded":true},{"name":"","content":"open WebSharper\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"e7094a13-7915-4e4a-9eac-b2a225e34a94"}],"companions":[],"id":{"$":0,"Item":"60bffe71-edde-4971-8327-70b9f5c578bb"},"expanded":true},{"name":"open WebSharper.JavaScript ","content":"open WebSharper.JavaScript ","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"e7094a13-7915-4e4a-9eac-b2a225e34a94"}],"companions":[],"id":{"$":0,"Item":"17e3c5b3-3602-4b39-b80a-6ee1c0cef740"},"expanded":true},{"name":"","content":"open WebSharper.UI.Next\nopen WebSharper.UI.Next.Client\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"6ccdcf8b-134a-4689-9785-5bdcb20a8c92"}],"companions":[],"id":{"$":0,"Item":"bcd0b4ef-b3c3-4fc7-93e9-afb8981420aa"},"expanded":true},{"name":"type on, type attr  (UI.Next)","content":"type on   = WebSharper.UI.Next.Html.on\ntype attr = WebSharper.UI.Next.Html.attr\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"6ccdcf8b-134a-4689-9785-5bdcb20a8c92"}],"companions":[],"id":{"$":0,"Item":"12fb5bda-7dcc-4389-9978-3bbe6f40f447"},"expanded":true},{"name":"module Option","content":"[<JavaScript>]\nmodule Option =\n    let defaultValue v =\n        function\n        | Some x -> x\n        | None   -> v\n        \n    let defaultWith f =\n        function\n        | Some x -> x\n        | None   -> f()        ","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"fee06ca2-1bda-467d-adb5-17eaf6d72d04"},"expanded":true},{"name":"module EditorRpc","content":"[< JavaScript >]\nmodule EditorRpc =\n\n    let callRPC asy callback =\n        async {\n            let! res = asy\n            callback res\n        } |> Async.Start\n\n    let checkSourceClient  source          callback = CIPHERPrototype.Editor.checkSource  source          |> callRPC <| callback\n    let methodsClient      source line col callback = CIPHERPrototype.Editor.methods      source line col |> callRPC <| callback\n    let declarationsClient source line col callback = CIPHERPrototype.Editor.declarations source line col |> callRPC <| callback\n    let translateClient    source minified callback = CIPHERPrototype.Editor.translate    source minified |> callRPC <| callback\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"60bffe71-edde-4971-8327-70b9f5c578bb"},{"$":0,"Item":"a28fe808-236e-4b7e-9509-51ebe21e35fc"}],"companions":[],"id":{"$":0,"Item":"79f8f6c6-d1f5-4593-9775-60ba2863e94d"},"expanded":true},{"name":"module ValType","content":"[<JavaScript>]\nmodule ValType =\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"60bffe71-edde-4971-8327-70b9f5c578bb"}],"companions":[],"id":{"$":0,"Item":"a48e4789-7b77-421e-a426-c53919e22aa4"},"expanded":true},{"name":"type Val","content":"[<NoComparison>]\ntype Val<'a> =\n    | Constant  of 'a\n    | DynamicV  of IRef<'a>\n    | Dynamic   of View<'a>\n\nmodule Val =\n    \n    let mapV : ('a -> 'b) -> Val<'a> -> Val<'b> =\n        fun    f             va      ->\n            match va with\n            | Constant  a -> f a                   |> Constant\n            | Dynamic  wa -> wa      |> View.Map f |> Dynamic \n            | DynamicV va -> va.View |> View.Map f |> Dynamic \n\n    let iterV : ('a -> unit) -> Val<'a> -> unit = //f v = toView v |> View.Get f\n        fun     f               va      ->\n            match va with\n            | Constant  a ->          f  a                  \n            | Dynamic  wa -> View.Get f wa \n            | DynamicV va ->          f va.Value \n\n    let toView v =\n        match v with\n        | Constant  a -> View.Const a\n        | Dynamic  wa -> wa\n        | DynamicV va -> va.View\n\n    let bindV : ('a -> Val<'b>) -> Val<'a> -> Val<'b> =\n        fun     f                  v       -> \n            match v with\n            | Constant  a -> f a\n            | Dynamic  wa -> wa      |> View.Bind (f >> toView) |> Dynamic \n            | DynamicV va -> va.View |> View.Bind (f >> toView) |> Dynamic \n\n    let inline map2V f = // : ('a -> 'b -> 'c) -> Val<'a> -> Val<'b> -> Val<'c> =\n        //fun     f                ->\n        let inline swap f a b = f b a\n        let inline fv vb = bindV (swap (f >> mapV) vb)\n        swap fv\n\n    let inline map3V f3 v1 v2 v3    = map2V f3 v1 v2    |> map2V (|>) v3\n    let inline map4V f3 v1 v2 v3 v4 = map3V f3 v1 v2 v3 |> map2V (|>) v4\n    \n    let tagDoc: ('a -> Doc) -> Val<'a> -> Doc =\n        fun     tag            va      ->\n            match va with\n            | Constant  a -> tag   a\n            | Dynamic  wa -> wa      |> View.Map tag |> Doc.EmbedView\n            | DynamicV va -> va.View |> View.Map tag |> Doc.EmbedView\n\n    let tagElt: ('a -> Elt) -> Val<'a> -> Doc =\n        fun     tag            va     ->\n            match va with\n            | Constant  a -> tag   a :> Doc\n            | Dynamic  wa -> wa     |> View.Map tag |> Doc.EmbedView\n            | DynamicV va -> va.View |> View.Map tag |> Doc.EmbedView\n\n    let attrV att       va      =\n            match va with\n            | Constant  a -> Attr.Create  att   a\n            | Dynamic  wa -> Attr.Dynamic att  wa\n            | DynamicV va -> Attr.Dynamic att  va.View\n\n\n    type HelperType = HelperType with\n        static member (&>) (HelperType, a : string      ) = Constant  a\n        static member (&>) (HelperType, a : bool        ) = Constant  a\n        static member (&>) (HelperType, a : int         ) = Constant  a\n        static member (&>) (HelperType, a : float       ) = Constant  a\n        static member (&>) (HelperType, a : Doc         ) = Constant  a\n        static member (&>) (HelperType, va: Val<string> ) =          va\n        static member (&>) (HelperType, va: Val<bool  > ) =          va\n        static member (&>) (HelperType, va: Val<int   > ) =          va\n        static member (&>) (HelperType, va: Val<float > ) =          va\n        static member (&>) (HelperType, va: Val<Doc   > ) =          va\n        static member (&>) (HelperType, va: Val<_     > ) =          va\n        static member (&>) (HelperType, vr: IRef<_    > ) = DynamicV vr\n        static member (&>) (HelperType, vw: View<_    > ) = Dynamic  vw\n\n    [< Inline @\"(\n            typeof($v) == 'function' ? {$:2, $0:$v} // View\n            :   typeof($v) == 'object'\n                      ? typeof($v.$) != 'undefined' // Val\n                            ? $v \n                            : typeof($v.Id) == 'number' || typeof($v.i) == 'number' || typeof($v.RView == 'function')// Var\n                                 ? {$:1, $0:$v}\n                                 : typeof($v.docNode) != 'undefined'\n                                     ? {$:0, $0:$v} // Doc\n                                     : {$:2, $0:$v} // View?\n                      : {$:0, $0:$v}) // other\n                                     \" >]\n    let fixit0 v = Constant v\n    let fixit2 v = let result = fixit0 v\n                   result\n\n    [< Inline \"CIPHERPrototype.Val.fixit2($v)\" >]\n    let inline fixit v = HelperType &> v\n\n    [< Inline >]\n    let inline bindIRef0 (f: 'a->IRef<'b>) (view: View<'a>) = \n        let contentVar = Var.Create Unchecked.defaultof<'b>\n        let changingIRefO : IRef<'b> option ref = ref None\n    \n        contentVar.View |> View.Sink (fun v -> !changingIRefO |> Option.iter (fun r -> if r.Value <> v then r.Value <- v))\n    \n        view |> View.Bind (fun cur ->\n            let r = f cur\n            changingIRefO    := Some r\n            contentVar.Value <- r.Value\n            r.View\n        ) |> View.Sink (fun v -> contentVar.Value <- v)\n        contentVar\n    \n    let inline toDoc       v           = toView      (fixit v ) |> Doc.EmbedView\n    [< Inline >]\n    let inline bindIRef f  v           = bindIRef0 f (fixit v   |> toView)\n    let inline iter     f  v           = iterV     f (fixit v )\n    let inline bind     f  v           = bindV     f (fixit v )\n    let inline map      f  v           = mapV      f (fixit v )\n    let inline map2     f  v1 v2       = map2V     f (fixit v1) (fixit v2)\n    let inline map3     f  v1 v2 v3    = map3V     f (fixit v1) (fixit v2) (fixit v3)\n    let inline map4     f  v1 v2 v3 v4 = map4V     f (fixit v1) (fixit v2) (fixit v3) (fixit v4)\n    ","parent":{"$":0,"Item":"a48e4789-7b77-421e-a426-c53919e22aa4"},"predecessors":[{"$":0,"Item":"4d91e739-77fc-495e-8e01-cda6f26c7835"},{"$":0,"Item":"bcd0b4ef-b3c3-4fc7-93e9-afb8981420aa"}],"companions":[],"id":{"$":0,"Item":"de3f372c-19ab-4e76-aa47-186326ceca0d"},"expanded":true},{"name":"open ValType","content":"open ValType","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"de3f372c-19ab-4e76-aa47-186326ceca0d"},{"$":0,"Item":"a48e4789-7b77-421e-a426-c53919e22aa4"}],"companions":[],"id":{"$":0,"Item":"0f5719f0-e95e-498d-ab88-f89ff1440e32"},"expanded":true},{"name":"module HtmlNode","content":"[<JavaScript>]\nmodule HtmlNode =\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"60bffe71-edde-4971-8327-70b9f5c578bb"}],"companions":[],"id":{"$":0,"Item":"495bce0a-4fb6-48fa-9158-c242d5965baa"},"expanded":true},{"name":"type HtmlNode","content":"[<NoComparison ; NoEquality>]\ntype HtmlNode =\n    | HtmlElement   of name: string * children: HtmlNode seq\n    | HtmlAttribute of name: string * value:    Val<string>\n    | HtmlText      of Val<string>\n    | HtmlEmpty\n    | SomeDoc       of Doc\n    | SomeAttr      of Attr\n    \nlet addClass    (classes:string) (add:string) = classes.Split ' ' |> Set.ofSeq |> Set.union  (Set.ofSeq <| add.Split ' ') |> String.concat \" \"\nlet removeClass (classes:string) (rem:string) = classes.Split ' ' |> Set.ofSeq |> Set.remove               rem            |> String.concat \" \"\n\nlet callAddClass = addClass \"a\" \"b\" // so that WebSharper.Collections.js is included\n\nlet inline chooseAttr node = \n    match node with\n    | HtmlAttribute (name, value   ) when name <> \"class\" && name <> \"style\" \n                                     -> Some <| Val.attrV name value\n    | SomeAttr             value     -> Some <|                value\n    | _                              -> None\n\nlet chooseThisAttr this node =\n    match node with\n    | HtmlAttribute (att, value) when att = this -> Some value\n    | _                                          -> None\n\nlet concat s a b = a + s + b\nlet groupAttr name sep children = \n    children \n    |> Seq.choose (chooseThisAttr name)\n    |> (fun ss -> if ss |> Seq.isEmpty \n                  then None \n                  else ss |> Seq.reduce (Val.map2 <| concat sep ) |> Val.attrV name |> Some)\n\nlet inline getAttrsFromSeq children =\n    children \n    |> Seq.choose chooseAttr\n    |> Seq.append (List.choose id [ children |> groupAttr \"class\" \" \" ; children |> groupAttr \"style\" \"; \" ])\n\nlet rec chooseNode node =\n    match node with\n    | HtmlElement(name, children) -> Some <| (Doc.Element name (getAttrsFromSeq children) (children |> Seq.choose chooseNode) :> Doc)\n    | HtmlText    vtext           -> Some <| Val.tagDoc WebSharper.UI.Next.Html.text vtext\n    | SomeDoc     doc             -> Some <| doc\n    | _                           -> None\n\nlet getAttrChildren attr =\n    Seq.tryPick (function \n                | HtmlAttribute(a, v) when a = attr -> Some v \n                | _                                 -> None)\n    >> Option.defaultValue (Constant \"\")\n\nlet mapHtmlElement f element =\n    match element with\n    | HtmlElement(name, children) -> f name  children\n    | _                           -> element\n\nlet getAttr attr element =\n    match element with\n    | HtmlElement(_, children) -> children\n    | _                        -> seq []\n    |> getAttrChildren attr\n\nlet getClass = getAttr \"class\"\nlet getStyle = getAttr \"style\"\n\nlet replaceAttribute att (children: HtmlNode seq) newVal =\n    HtmlAttribute(att, newVal)\n    :: (children\n        |> Seq.filter (function HtmlAttribute(old, _) when old = att -> false | _ -> true)\n        |> Seq.toList\n       )\n\nlet replaceAtt att node newVal = mapHtmlElement (fun n ch -> HtmlElement(n, replaceAttribute att ch newVal)) node\n\ntype HtmlNode with\n    member inline this.toDoc = \n        match this with\n        | HtmlAttribute _\n        | HtmlEmpty       -> Doc.Empty\n        | _               -> chooseNode this |> Option.defaultValue Doc.Empty\n    member inline   this.Class       clas = Val.fixit clas |> replaceAtt \"class\" this\n    member inline   this.AddChildren add  = mapHtmlElement (fun n ch -> HtmlElement(n, Seq.append add ch )) this\n\nlet renderDoc = chooseNode >> Option.defaultValue Doc.Empty\n    ","parent":{"$":0,"Item":"495bce0a-4fb6-48fa-9158-c242d5965baa"},"predecessors":[{"$":0,"Item":"fee06ca2-1bda-467d-adb5-17eaf6d72d04"},{"$":0,"Item":"e39e08cd-7fa4-4b33-9d4d-a3b3baa0b050"},{"$":0,"Item":"0f5719f0-e95e-498d-ab88-f89ff1440e32"}],"companions":[],"id":{"$":0,"Item":"d9124644-0af6-4a7f-a711-ef76ca77f0de"},"expanded":true},{"name":"","content":"let inline atr att v = Val.attrV  att (Val.fixit v)\nlet inline tag tag v = Val.tagDoc tag (Val.fixit v)\n\nlet inline _class       v = atr \"class\"       v\nlet inline _type        v = atr \"type\"        v\nlet inline _style       v = atr \"style\"       v\nlet inline _placeholder v = atr \"placeholder\" v\nlet inline textV        v = tag  Html.text    v\n\nlet inline htmlElement   name ch = HtmlElement  (name, ch           )\nlet inline htmlAttribute name v  = HtmlAttribute(name, Val.fixit v  )\nlet inline htmlText      txt     = HtmlText     (      Val.fixit txt)\nlet inline someElt       elt     = SomeDoc      (elt :> Doc         )    \n\nlet inline br        ch = htmlElement   \"br\"       ch\nlet inline hr        ch = htmlElement   \"hr\"       ch\nlet inline h1        ch = htmlElement   \"h1\"       ch\nlet inline h2        ch = htmlElement   \"h2\"       ch\nlet inline h3        ch = htmlElement   \"h3\"       ch\nlet inline h4        ch = htmlElement   \"h4\"       ch\nlet inline h5        ch = htmlElement   \"h5\"       ch\nlet inline h6        ch = htmlElement   \"h6\"       ch\nlet inline div       ch = htmlElement   \"div\"      ch\nlet inline img       ch = htmlElement   \"img\"      ch\nlet inline span      ch = htmlElement   \"span\"     ch\nlet inline form      ch = htmlElement   \"form\"     ch\nlet inline table     ch = htmlElement   \"table\"    ch\nlet inline thead     ch = htmlElement   \"thead\"    ch\nlet inline th        ch = htmlElement   \"th\"       ch\nlet inline tr        ch = htmlElement   \"tr\"       ch\nlet inline td        ch = htmlElement   \"td\"       ch\nlet inline tbody     ch = htmlElement   \"tbody\"    ch\nlet inline label     ch = htmlElement   \"label\"    ch\nlet inline button    ch = htmlElement   \"button\"   ch\nlet inline script    sc = htmlElement   \"script\"   sc\nlet inline styleH    st = htmlElement   \"style\"    st\nlet inline fieldset  ch = htmlElement   \"fieldset\" ch\nlet inline link      sc = htmlElement   \"link\"     sc\n\nlet inline href      v  = htmlAttribute \"href\"     v\nlet inline rel       v  = htmlAttribute \"rel\"      v\nlet inline src       v  = htmlAttribute \"src\"      v\nlet inline ``class`` v  = htmlAttribute \"class\"    v\nlet inline ``type``  v  = htmlAttribute \"type\"     v\nlet inline width     v  = htmlAttribute \"width\"    v\nlet inline Id        v  = htmlAttribute \"id\"       v\n\nlet inline classIf cls v = ``class`` <| Val.map (fun b -> if b then cls else \"\") (Val.fixit v)\n\nlet inline ``xclass`` v  = \n    match Val.fixit v with\n    | Constant c  -> Attr.Class        c       \n    | Dynamic  cw -> Attr.DynamicClass \"class_for_view_not_implemented\" cw      ((<>)\"\")\n    | DynamicV cv -> Attr.DynamicClass cv.Value                         cv.View ((<>)\"\")\n    |> SomeAttr\n\nlet style2pairs (ss:string) : (string * string) [] =\n    ss.Split(';') \n    |> Array.map   (fun s -> s.Split(':') ) \n    |> Array.filter(fun d -> d.Length = 2 )\n    |> Array.map   (fun d -> d.[0].Trim(), d.[1].Trim() )\n\nlet string2Styles = style2pairs >> Array.map (fun (n, v) -> Attr.Style n v |> SomeAttr)\n\nlet inline style     v  = htmlAttribute \"style\"    v\nlet inline style1  n v  = Val.fixit v |> Val.toView |> Attr.DynamicStyle n |> SomeAttr\n\nlet composeDoc elt dtl dtlVal = dtlVal |> Val.toView |> Doc.BindView (Seq.append dtl >> elt >> renderDoc) |> SomeDoc\n\nlet inline bindHElem hElem v  = Doc.BindView (hElem >> renderDoc)  (Val.toView <| Val.fixit v)            |> SomeDoc\n","parent":{"$":0,"Item":"495bce0a-4fb6-48fa-9158-c242d5965baa"},"predecessors":[{"$":0,"Item":"d9124644-0af6-4a7f-a711-ef76ca77f0de"}],"companions":[],"id":{"$":0,"Item":"c3755c07-1385-495d-bad7-a5b0fa54ac9b"},"expanded":true},{"name":"let LoadFiles","content":"\n\n[< Inline \"CIPHERSpaceLoadFiles($files, $cb)\" >]\nlet LoadFiles (files: string []) (cb: unit -> unit) : unit = X<_>","parent":{"$":0,"Item":"495bce0a-4fb6-48fa-9158-c242d5965baa"},"predecessors":[{"$":0,"Item":"02d3bc50-4aa0-41ce-a37e-5b90a943481f"},{"$":0,"Item":"17e3c5b3-3602-4b39-b80a-6ee1c0cef740"}],"companions":[],"id":{"$":0,"Item":"1f1aa135-fd74-42cc-b9a5-87f380c113a9"},"expanded":true},{"name":"","content":"open HtmlNode","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"c3755c07-1385-495d-bad7-a5b0fa54ac9b"},{"$":0,"Item":"495bce0a-4fb6-48fa-9158-c242d5965baa"}],"companions":[],"id":{"$":0,"Item":"3709b431-1507-48ed-9487-dd49ce7be748"},"expanded":true},{"name":"module Template","content":"[<JavaScript>]\nmodule Template =","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"12fb5bda-7dcc-4389-9978-3bbe6f40f447"},{"$":0,"Item":"17e3c5b3-3602-4b39-b80a-6ee1c0cef740"},{"$":0,"Item":"3709b431-1507-48ed-9487-dd49ce7be748"},{"$":0,"Item":"60bffe71-edde-4971-8327-70b9f5c578bb"},{"$":0,"Item":"11ecbe45-3d0c-4121-a8fd-7c126b96f4a3"}],"companions":[],"id":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"expanded":true},{"name":"","content":"let container content = div <| [ ``class`` \"container\" ] @ content","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"8fb54777-3046-4aae-9282-33401a45c280"},"expanded":true},{"name":"Template.Button","content":"[<NoComparison ; NoEquality>]\ntype Button = {\n    _type   : Val<string>\n    _class  : Val<string>\n    text    : Val<string>\n    onClick : Dom.Element -> Dom.MouseEvent -> unit\n    disabled: Val<bool>\n} with\n  static member  New   = { _class   = Val.fixit \"btn\" \n                           _type    = Val.fixit \"button\" \n                           text     = Val.fixit \"Button\"\n                           onClick  = fun _ _ -> ()\n                           disabled = Val.fixit false\n                         }\n  member        this.Render     =         \n    button [ ``type``  <| this._type\n             ``class`` <| this._class\n             SomeAttr  <| attr.disabledDynPred (View.Const \"\") (this.disabled |> Val.toView)\n             SomeAttr  <| on.click <@ this.onClick @>\n             HtmlText  <| this.text \n           ]\n  member inline this.Class       clas = { this with _class   = Val.fixit clas }\n  member inline this.Type        typ  = { this with _type    = Val.fixit typ  }\n  member inline this.Text        txt  = { this with text     = Val.fixit txt  }\n  member inline this.Disabled    dis  = { this with disabled = Val.fixit dis  }\n  member inline this.OnClick     f    = { this with onClick  = f              }","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"},"expanded":true},{"name":"Template.Input","content":"[<NoComparison ; NoEquality>]\ntype Input = {\n    _type       : Val<string>\n    _class      : Val<string>\n    placeholder : Val<string>\n    id          : string\n    var         : IRef<string>\n    prefix      : HtmlNode\n    suffix      : HtmlNode\n    content     : HtmlNode\n    prefixAdded : bool\n    suffixAdded : bool\n} with\n  static member  New(var) = { _class      = Val.fixit \"form-control\" \n                              _type       = Val.fixit \"text\" \n                              placeholder = Val.fixit \"Enter text:\"\n                              id          = \"\"\n                              content     = br []\n                              prefix      = HtmlEmpty\n                              prefixAdded = false\n                              suffix      = HtmlEmpty\n                              suffixAdded = false\n                              var         = var   \n                            }\n  static member  New(v)   = Input.New(Var.Create v)\n  member        this.Render    =         \n    let groupClass det = match det with HtmlText _  -> \"input-group-addon\" | _ -> \"input-group-btn\"\n    div [\n        if this.prefixAdded || this.suffixAdded then\n            yield ``class`` \"input-group\"\n        if this.prefixAdded then\n            yield  span     [ ``class`` <| groupClass this.prefix \n                              this.prefix       ]\n        yield Doc.Input [ _type            this._type\n                          _class           this._class\n                          attr.id          this.id  \n                          _placeholder     this.placeholder ]\n                          this.var\n              :> Doc |> SomeDoc\n        if this.suffixAdded then\n            yield  span     [ ``class`` <| groupClass this.suffix \n                              this.suffix       ]\n      ]\n  member inline this.Class       clas = { this with _class      = Val.fixit clas                  }\n  member inline this.Type        typ  = { this with _type       = Val.fixit typ                   }\n  member inline this.Placeholder plc  = { this with placeholder = Val.fixit plc                   }\n  member inline this.Id          id   = { this with id          =       id                        }\n  member inline this.Content     c    = { this with content     =       c                         }\n  member inline this.Prefix      p    = { this with prefix      =       p    ; prefixAdded = true }\n  member inline this.Suffix      s    = { this with suffix      =       s    ; suffixAdded = true }\n  member inline this.SetVar      v    = { this with var         = v                               }\n  member inline this.Var              = this.var","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"},"expanded":true},{"name":"Template.Hoverable ","content":"[<NoComparison ; NoEquality>]\ntype Hoverable = {\n    hover      : IRef<bool>\n    content    : HtmlNode seq\n} with\n  static member  New   = \n    let hover      = Var.Create false\n    { \n        hover      = hover     \n        content    = []\n    }\n  static member  Demo  = \n    let hover      = Var.Create false\n    { \n        hover      = hover     \n        content    = [ style \"flex-flow: column;\"\n                     ]\n    }\n  member        this.Render          =\n    [ classIf \"hovering\" this.hover\n      SomeAttr <| on.mouseEnter (fun _ _ -> this.hover.Value <- true )\n      SomeAttr <| on.mouseLeave (fun _ _ -> this.hover.Value <- false)\n    ] \n    |> Seq.append  this.content\n    |> div\n  member inline this.Content    c = { this with content    =       c }\n","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"c7841be7-5cd5-40f3-b91c-c107b487bc0c"},"expanded":true},{"name":"Template.Panel","content":"[<NoComparison ; NoEquality>]\ntype Panel = {\n    _class   : Val<string>\n    _style   : Val<string>\n    title    : Val<string>\n    header   : HtmlNode seq\n    content  : HtmlNode seq\n    disabled : Val<bool>\n} with\n  static member  New   = { _class   = Val.fixit <| \"panel panel-default shadow\"\n                           _style   = Val.fixit <| \"text-align:center\" \n                           title    = Val.fixit <| \"Panel\"        \n                           header   =          [ htmlText \"Some text\"    ] \n                           content  =          [ htmlText \"Some Content\" ] \n                           disabled = Val.fixit <| Var.Create false\n                         }\n  member        this.Render          =  \n    fieldset [ SomeAttr <| attr.disabledDynPred (View.Const \"\")  (this.disabled |> Val.toView)\n               div [ ``class`` this._class\n                     div (Seq.append\n                              [ ``class`` \"panel-heading\"\n                                label [ ``class``  \"panel-title text-center\" ; htmlText this.title ]\n                              ]\n                              this.header)\n\n                     div (Seq.append\n                              [ ``class`` \"panel-body\"\n                                style     this._style \n                              ]\n                              this.content)\n                   ] \n             ]\n  member inline this.Class       clas = { this with _class   = Val.fixit clas                                        }\n  member inline this.Style       sty  = { this with _style   = Val.fixit sty                                         }\n  member inline this.Title       txt  = { this with title    = Val.fixit txt                                         }\n  member inline this.Header      h    = { this with header   =       h                                           }\n  member inline this.Content     c    = { this with content  =       c                                           }\n  member inline this.Disabled    dis  = { this with disabled =       dis                                         }\n","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[{"$":0,"Item":"081bac32-e739-4124-87eb-eb7d6f2220bc"}],"companions":[],"id":{"$":0,"Item":"0a11766b-f227-4b38-88a3-919d964387bf"},"expanded":true},{"name":"Template.TextArea","content":"[<NoComparison ; NoEquality>]\ntype TextArea = {\n    _class      : Val<string>\n    placeholder : Val<string>\n    id          : string\n    var         : IRef<string>\n} with\n  static member  New(var) = { _class      = Val.fixit \"form-control\"\n                              placeholder = Val.fixit \"Enter text:\"\n                              id          = \"\"\n                              var         = var   \n                            }\n  static member  New(v)   = TextArea.New(Var.Create v)\n  member        this.Render    =    \n    someElt \n    <| Doc.InputArea\n        [ \n          _class       this._class\n          attr.id      this.id  \n          _placeholder this.placeholder ]\n        this.var\n  member inline this.Class       clas = { this with _class      = Val.fixit clas                  }\n  member inline this.Placeholder plc  = { this with placeholder = Val.fixit plc                   }\n  member inline this.Id          id   = { this with id          =       id                        }\n  member inline this.SetVar      v    = { this with var         = v                               }\n  member inline this.Var              = this.var\n","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"3234a0bf-4541-4f2c-8bbf-b5ab3a0e415b"},"expanded":true},{"name":"codemirror.js","content":"let codeMirrorIncludes =\n   [| \"/EPFileX/codemirror/scripts/codemirror/codemirror.js\"             \n      \"/EPFileX/codemirror/scripts/intellisense.js\"                      \n      \"/EPFileX/codemirror/scripts/codemirror/codemirror-intellisense.js\"\n      \"/EPFileX/codemirror/scripts/codemirror/codemirror-compiler.js\"    \n      \"/EPFileX/codemirror/scripts/codemirror/mode/fsharp.js\"            \n      \"/EPFileX/codemirror/scripts/addon/edit/matchbrackets.js\"          \n      \"/EPFileX/codemirror/scripts/addon/selection/active-line.js\"       \n      \"/EPFileX/codemirror/scripts/addon/display/fullscreen.js\"          \n      \"/EPFileX/codemirror/scripts/codemirror/mode/markdown.js\"                 \n   |]","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"4180353c-9dc5-438d-862d-851539b02075"},"expanded":true},{"name":"Template.CodeMirror","content":"[<NoComparison ; NoEquality>]\ntype CodeMirror = {\n    _class      : Val<string>\n    id          : string\n    var         : IRef<string>\n} with\n  [< Inline \"setupEditor($elt)\" >]\n  static member SetupEditor elt : CodeMirror = X<_>\n\n  [< Inline \"$this.getValue()\" >]\n  member this.GetValue() : string = X<_>\n\n  [< Inline \"$this.setValue($v)\" >]\n  member this.SetValue (v:string) : unit= X<_>\n\n  [< Inline \"$this.on($event, $f)\" >]\n  member this.On(event: string, f:(CodeMirror * obj) -> unit) : unit = X<_>\n  static member  New(var) = { _class      = Val.fixit \"\" \n                              id          = \"\"\n                              var         = var   \n                            }\n  static member  New(v)   = CodeMirror.New(Var.Create v)\n  member        this.Render    =\n    div [ \n          ``class``            this._class\n          SomeAttr <| attr.id  this.id \n          style \"position: relative\"\n          div [\n                style \"height: 100%; width: 100%; position: absolute;\"\n                SomeAttr <| on.afterRender (fun el ->\n                  LoadFiles codeMirrorIncludes\n                    (fun () ->                       \n                       let editor = CodeMirror.SetupEditor el\n                       editor.On(\"change\", fun (cm, change) -> this.var.Value <- editor.GetValue())\n                       this.var.View |> View.Sink (fun v -> if editor.GetValue() <> v then editor.SetValue v)\n                    )\n                )    \n              ]\n          link [ href \"/EPFileX/codemirror/content/editor.css\"                   ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/content/codemirror.css\"               ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/content/theme/rubyblue.css\"           ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/scripts/addon/display/fullscreen.css\" ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n     ]\n  member inline this.Class       clas = { this with _class      = Val.fixit clas                  }\n  member inline this.Id          id   = { this with id          =       id                        }\n  member inline this.SetVar      v    = { this with var         = v                               }\n  member inline this.Var              = this.var\n","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[{"$":0,"Item":"1f1aa135-fd74-42cc-b9a5-87f380c113a9"},{"$":0,"Item":"4180353c-9dc5-438d-862d-851539b02075"}],"companions":[],"id":{"$":0,"Item":"b03ba35c-a03c-4bbe-a373-1ce551524e56"},"expanded":true},{"name":"Template.SplitterBar","content":"[<NoComparison ; NoEquality>]\ntype SplitterBar = {\n    value            : IRef<float>\n    min              : Val<float>\n    max              : Val<float>\n    node             : HtmlNode\n    vertical         : bool\n    after            : bool\n    mutable dragging : bool\n    mutable startP   : float \n    mutable start    : float \n    mutable size     : float \n    mutable domElem  : Dom.Element option\n}\nwith\n    static member New = \n        {\n            value    =              Var.Create 30.0\n            min      = Val.fixit <| Var.Create 10.0\n            max      = Val.fixit <| Var.Create 75.0\n            node     = div [ ``class`` \"Splitter\" ]\n            vertical = true  \n            after    = true\n            dragging = false\n            startP   = 0.0\n            start    = 0.0\n            size     = 0.0\n            domElem  = None\n        }\n    member        this.GetValue   = this.value |> Val.map2 max this.min |> Val.map2 min this.max\n    member        this.Render  =\n        let mouseCoord (ev: Dom.MouseEvent) = if this.vertical then float ev.ClientX else float ev.ClientY\n        let size () : float =\n            match this.domElem with\n            | None    -> 100.0\n            | Some el -> \n             el.ParentElement.GetBoundingClientRect() \n             |> fun r -> \n                 match this.vertical, this.after with\n                 | true , true  ->  r.Width  \n                 | true , false -> -r.Width \n                 | false, true  ->  r.Height\n                 | false, false -> -r.Height\n        let drag (ev: Dom.Event) =\n            ev :?> Dom.MouseEvent\n            |> mouseCoord\n            |> fun m   -> (m - this.start) * 100.0 / this.size + this.startP\n            |> fun v   -> this.value.Value <- v\n        let rec finishDragging (_: Dom.Event) =\n            if this.dragging then\n                this.dragging <- false\n                JS.Window.RemoveEventListener(\"mousemove\", drag          , false) \n                JS.Window.RemoveEventListener(\"mouseup\"  , finishDragging, false) \n                printfn \"mouseup\"\n        let startDragging _ (ev: Dom.MouseEvent) =\n            if not this.dragging then\n                this.GetValue |> Val.iter (fun startP ->\n                    this.dragging <- true\n                    this.startP   <- startP\n                    this.start    <- mouseCoord ev\n                    this.size     <- size()\n                    JS.Window.AddEventListener(\"mousemove\", drag          , false) \n                    JS.Window.AddEventListener(\"mouseup\"  , finishDragging, false) \n                    ev.PreventDefault()\n                )\n        this.node\n          .AddChildren [\n            SomeAttr <| on.mouseDown startDragging\n            SomeAttr <| on.afterRender (fun el -> this.domElem <- Some el)\n          ]\n    member inline this.Node  node = { this with node         = node        }\n    member inline this.Min   v    = { this with min          = Val.fixit v }\n    member inline this.Max   v    = { this with max          = Val.fixit v }\n    member inline this.Var   v    = { this with value        =           v }\n    member inline this.Value v    = this.value.Value <- v ; this\n    member inline this.Vertical   = { this with vertical     = true        }\n    member inline this.Horizontal = { this with vertical     = false       }\n    member inline this.Before     = { this with after        = false       }\n    member inline this.After      = { this with after        = true        }","parent":{"$":0,"Item":"e9ac2d66-474a-46a6-95fa-d369e6d703d1"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"70030378-692d-431d-bed9-c839a7f95798"},"expanded":true},{"name":"module TestCode","content":"[<JavaScript>]\nmodule TestCode =","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"17e3c5b3-3602-4b39-b80a-6ee1c0cef740"},{"$":0,"Item":"3709b431-1507-48ed-9487-dd49ce7be748"},{"$":0,"Item":"1095ae38-19fc-4195-840c-c368a3a486c4"}],"companions":[],"id":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"expanded":true},{"name":"type TestNode","content":"type TestNode(nodeName, ?clearNode: bool) =\n  let baseNode = \n        match JS.Document.GetElementById nodeName with\n        | null -> let el = JS.Document.CreateElement \"div\"\n                  el.SetAttribute(\"id\", nodeName)\n                  JS.Document.Body.AppendChild el |> ignore\n                  el\n        | node -> node\n  let testNode =\n    match baseNode.ShadowRoot with\n    | null -> let e = JS.Document.CreateElement \"div\"\n              baseNode.AttachShadow(Dom.ShadowRootInit(Dom.ShadowRootMode.Open)).AppendChild e |> ignore\n              e\n    | root -> root.FirstChild :?> Dom.Element\n  do if defaultArg clearNode true then testNode.InnerHTML <- \"\"\nwith\n  new(?clearNode: bool) = TestNode(\"TestNode\", defaultArg  clearNode true)\n  member this.TestNode        = testNode","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"f2571ac9-37ec-4d7c-9ead-9e5f79ae1be1"},"expanded":true},{"name":"AddBootstrap","content":"  member this.AddBootstrap =\n    JS.Document.CreateElement \"div\"\n    |> fun el -> \n        el.InnerHTML <- \n            @\"<script src='http://code.jquery.com/jquery-3.1.1.min.js' type='text/javascript' charset='UTF-8'></script>\n            <script src='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js' type='text/javascript' charset='UTF-8'></script>\n            <link type='text/css' rel='stylesheet' href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'>\n            <link type='text/css' rel='stylesheet' href='/EPFileX/css/main.css'>\n            \"\n        testNode.AppendChild el |> ignore\n    this","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"f2571ac9-37ec-4d7c-9ead-9e5f79ae1be1"}],"companions":[],"id":{"$":0,"Item":"081bac32-e739-4124-87eb-eb7d6f2220bc"},"expanded":true},{"name":"testDoc (UI.Next)","content":"  member inline this.TestDoc  doc  = doc  :> Doc       |> Doc.Run this.TestNode","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"f2571ac9-37ec-4d7c-9ead-9e5f79ae1be1"},{"$":0,"Item":"aba6c516-0ac9-4abe-95a2-7257d077e338"},{"$":0,"Item":"bcd0b4ef-b3c3-4fc7-93e9-afb8981420aa"},{"$":0,"Item":"6ccdcf8b-134a-4689-9785-5bdcb20a8c92"}],"companions":[],"id":{"$":0,"Item":"c110a9c9-bc3b-4be7-8e5d-f43cc75f93ed"},"expanded":true},{"name":"testHtmlNode","content":"  member inline this.TestHtml node = node |> renderDoc |> this.TestDoc","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"c110a9c9-bc3b-4be7-8e5d-f43cc75f93ed"}],"companions":[],"id":{"$":0,"Item":"3038cd62-093c-4385-aa9b-799297bd379c"},"expanded":true},{"name":"testFreeHtml ","content":"  member        this.FreeHtml node =\n    let freeHtml = Var.Create \"\"\n    div [\n          node\n          someElt <| Doc.InputArea [ Html.attr.placeholder \"Enter Free HTML here:\" ] freeHtml \n          SomeDoc <| tag Doc.Verbatim                                                freeHtml\n    ]\n    |> this.TestHtml","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"3038cd62-093c-4385-aa9b-799297bd379c"}],"companions":[],"id":{"$":0,"Item":"456562f7-0757-4431-9aeb-d58b050cecf7"},"expanded":true},{"name":"testResult","content":"  member inline this.TestResult res =\n    this.AddBootstrap |> ignore\n    div [ ``class`` \"container\"\n          Template.Panel.New\n            .Title(\"Result:\")\n            .Header([])\n            .Content([ h3 [ htmlText <| sprintf \"%A\" res ; style \"font-family:monospace;\"] ])\n            .Render\n     ] |> this.TestHtml","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"3038cd62-093c-4385-aa9b-799297bd379c"},{"$":0,"Item":"081bac32-e739-4124-87eb-eb7d6f2220bc"},{"$":0,"Item":"0a11766b-f227-4b38-88a3-919d964387bf"}],"companions":[],"id":{"$":0,"Item":"c47adc01-4550-4830-8df5-e1ebedaee7d0"},"expanded":true},{"name":"","content":"[1..10] |> Seq.take 5 |> Seq.toArray\n|> TestNode().TestResult","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"c47adc01-4550-4830-8df5-e1ebedaee7d0"}],"companions":[],"id":{"$":0,"Item":"74b8570e-dcd4-4dff-87a5-cd7ec96b8527"},"expanded":true},{"name":"Demo Template.Button","content":"do Template.Button.New.Text(\"Press me!\").OnClick(fun _ _ -> JS.Alert \"Button pressed\").Render \n|> TestNode().TestHtml","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"3038cd62-093c-4385-aa9b-799297bd379c"},{"$":0,"Item":"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"}],"companions":[],"id":{"$":0,"Item":"0a1fa320-b731-473a-93e2-dae49cc296f7"},"expanded":true},{"name":"Demo Template.Input","content":"let inp = Template.Input.New(\"Hello\")\n\nlet inline h1 ch = htmlElement \"h1\" ch\n\nh2 [\n  inp.Render\n  htmlText inp.Var\n  htmlElement \"h1\" [ htmlText inp.Var ]\n  h1 [ htmlText inp.Var ]\n]\n|> TestNode().TestHtml","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"456562f7-0757-4431-9aeb-d58b050cecf7"},{"$":0,"Item":"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}],"companions":[],"id":{"$":0,"Item":"f3a7ead2-49e1-4ff4-b96e-6fe699a1c8a9"},"expanded":true},{"name":"Demo Template.Code","content":"do Template.CodeMirror.New(\"this is a test.\").Render \n|> TestNode().TestHtml","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"456562f7-0757-4431-9aeb-d58b050cecf7"},{"$":0,"Item":"b03ba35c-a03c-4bbe-a373-1ce551524e56"}],"companions":[],"id":{"$":0,"Item":"f2cc3e92-5e61-47b2-982b-40f5c5784e6a"},"expanded":true},{"name":"Demo TemplateSplitterBar","content":"let styleT   p =\n  p |> sprintf \"\"\"\n.SplitterArea {\n    display: grid;\n    grid-template-columns: %f%% auto;\n    grid-template-areas:   \"left right\";\n    background-color: #41414d;\n    color: #444;\n    height: 10vh;\n    grid-gap: 9px;\n    padding : 9px;\n}\n\n.SplitterArea > :nth-child(1){  grid-area: left  ; overflow: hidden; background-color: lightgreen; }\n.SplitterArea > :nth-child(2){  grid-area: right ; overflow: hidden; background-color: lightblue ; }\n\n.Splitter { \n    grid-column     :    2      ;\n    grid-row        :  1/2      ;\n    width           :    5px    ; \n    margin-left     : -7.5px    ; \n    border          :    0px    ; \n    padding         :    0px    ;\n    cursor          : col-resize;\n  \tbackground-color: #eef      ; \n}   \"\"\"\n\nlet splitter   = Template.SplitterBar.New\n\ndiv [\n  ``class`` \"SplitterArea\"\n  div    [ htmlText \"LEFT\"                              ]\n  div    [ htmlText \"RIGHT\"                             ]\n  styleH [ htmlText <| Val.map styleT splitter.GetValue ]\n  splitter.Render\n]\n|> TestNode().FreeHtml","parent":{"$":0,"Item":"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"},"predecessors":[{"$":0,"Item":"70030378-692d-431d-bed9-c839a7f95798"},{"$":0,"Item":"456562f7-0757-4431-9aeb-d58b050cecf7"}],"companions":[],"id":{"$":0,"Item":"0aa90429-4e7c-42eb-b108-3dd70e710bf1"},"expanded":true},{"name":"module CodeEditor","content":"[<JavaScript>]\nmodule CodeEditor =\n","parent":{"$":0,"Item":"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"},"predecessors":[{"$":0,"Item":"fee06ca2-1bda-467d-adb5-17eaf6d72d04"}],"companions":[],"id":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"expanded":true},{"name":"","content":"type CodeSnippetId = CodeSnippetId of System.Guid        \nwith static member New = CodeSnippetId <| System.Guid.NewGuid()\n\nlet snippetName name (content: string) =\n        if name <> \"\" then name else \n        content\n            .Trim()\n            .Split([| '\\n' |], System.StringSplitOptions.RemoveEmptyEntries)\n        |> Seq.tryHead\n        |> Option.map (fun s -> s.Trim())\n        |> Option.defaultValue \"<empty>\"\n\ntype CodeSnippet = {\n    name         : string\n    content      : string\n    parent       : CodeSnippetId option\n    predecessors : CodeSnippetId list\n    companions   : CodeSnippetId list\n    id           : CodeSnippetId\n} with\n    member this.Name = snippetName this.name this.content\n\nlet codeSnippetsStorage = WebSharper.UI.Next.Storage.LocalStorage \"CodeSnippets\" Serializer.Typed<CodeSnippet>\nlet codeSnippets        = ListModel.CreateWithStorage<CodeSnippetId, CodeSnippet> (fun s -> s.id) codeSnippetsStorage\n//    let codeSnippets        = ListModel.Create<CodeSnippetId, CodeSnippet> (fun s -> s.id) []\n\nlet tryPickI f s = s |> Seq.indexed |> Seq.filter f |> Seq.tryHead\n\ntype CodeSnippet \n    with\n    static member PickIO id = codeSnippets.Value |> tryPickI (fun (_, snp) -> snp.id = id)\n    static member FetchO id = codeSnippets.TryFindByKey id\n    static member FetchL id = CodeSnippet.FetchO id |> Option.toList\n    static member New(            pred    , cnt) = CodeSnippet.New(\"\", None   , pred, [], cnt)\n    static member New(        pa, pred    , cnt) = CodeSnippet.New(\"\", Some pa, pred, [], cnt)\n    static member New(        pa,           cnt) = CodeSnippet.New(\"\", Some pa, []  , [], cnt)\n    static member New(                      cnt) = CodeSnippet.New(\"\", None   , []  , [], cnt)\n    static member New(    nm, pa, pred, co, cnt) = CodeSnippet.New(codeSnippets.Length, nm, pa, pred, co, cnt)\n    static member New(od, nm, pa, pred, co, cnt) =\n        let newS =\n            {\n                name         = nm\n                content      = cnt\n                parent       = pa\n                predecessors = pred\n                companions   = co\n                id           = CodeSnippetId.New\n            }\n        match od, codeSnippets.Length with\n        | _, 0            -> codeSnippets.Append newS\n        | 0, _            -> codeSnippets.Set <| Seq.append [| newS |] codeSnippets.Value\n        | i, n when i < n -> codeSnippets.Value \n                                |> Seq.toArray\n                                |> Array.splitAt od\n                                |> fun (fst, snd) -> Array.append fst <| Array.append [| newS |] snd\n                                |> codeSnippets.Set \n        | _, _            -> codeSnippets.Append newS\n        newS\n    member this.UniquePredecesors() =\n        let rec preds (ins : CodeSnippetId list) outs : CodeSnippetId list =\n            match ins with\n            | []         -> outs\n            | hd :: rest -> List.collect id [ rest ; hd |> CodeSnippet.FetchL |> List.collect (fun s -> s.parent |> Option.toList |> List.append <| s.predecessors) ]\n                            |> preds <| if outs |> Seq.contains hd then outs else hd::outs\n        preds [ this.id ] []\n    member this.Level() =\n        let rec level snp out = \n            snp.parent\n            |> Option.bind CodeSnippet.FetchO\n            |> Option.map (fun p -> level p <| out + (if p.content.StartsWith \"namespace \" then 0 else 1)) \n            |> Option.defaultValue out\n        level this 0\n    member this.NameSanitized =\n        //let illegal = System.IO.Path.GetInvalidFileNameChars()\n        let illegal = [|'\"'   ; '<'   ; '>'   ; '|'   ; '\\000'; '\\001'; '\\002'; '\\003'; '\\004'; '\\005'; '\\006';\n                        '\\007'; '\\b'  ; '\\009'; '\\010'; '\\011'; '\\012'; '\\013'; '\\014'; '\\015';\n                        '\\016'; '\\017'; '\\018'; '\\019'; '\\020'; '\\021'; '\\022'; '\\023'; '\\024';\n                        '\\025'; '\\026'; '\\027'; '\\028'; '\\029'; '\\030'; '\\031'; ':'   ; '*'   ; '?';\n                        '\\\\'  ; '/'|]\n        this.Name\n        |> String.filter (fun c -> not <| Array.contains c illegal)\n        |> (fun c -> \"F# \" + c + \".fsx\")\n    member this.ContentIndented() =\n        let lvl = this.Level()\n        if lvl = 0 then this.content \n        else this.content.Split('\\n')\n                |> Array.map (fun l -> if l.StartsWith \"#\" then l else  (String.replicate lvl \"  \") + l)\n                |> String.concat \"\\n\"\n        |> sprintf \"# 1 @\\\"%s\\\"\\n%s\" this.NameSanitized\n    member this.Code() =\n        let preds = this.UniquePredecesors() |> Seq.toArray\n        codeSnippets.Value\n        |> Seq.filter (fun snp -> preds |> Array.contains snp.id)\n        |> Seq.map    (fun snp -> snp.ContentIndented()         )\n        |> String.concat \"\\n\"\n    member this.IsDescendantOf antId =\n        let rec isDescendantOf snp =\n            match snp.parent with\n            | None       -> false\n            | Some parId ->\n            if parId = antId then true else\n            CodeSnippet.FetchO parId\n            |> Option.map isDescendantOf\n            |> Option.defaultValue false\n        isDescendantOf this","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[],"companions":[],"id":{"$":0,"Item":"2deb54e7-009e-4297-b2bc-1c86d04203a4"},"expanded":true},{"name":"currentCodeSnippetId","content":"let missingVar  = Var.Create \"\"\nlet missing find lens k =\n    match find k with\n    | Some _ -> lens k\n    | None   -> missingVar.Lens (fun _ -> \"\") (fun _ _ -> \"\")\n    \nlet currentCodeSnippetId  = Var.Create <| CodeSnippetId.New\n\nlet refresh       = Var.Create()\nlet refreshView b = refresh.Value <- b\n\nlet currentCodeSnippetO = Val.map2 (fun k () -> codeSnippets.TryFindByKey k) currentCodeSnippetId refresh\n\nlet curSnippetNameOf k = missing codeSnippets.TryFindByKey <| codeSnippets.LensInto (fun s -> s.Name   ) (fun s n -> { s with name    = n }) <| k\nlet curSnippetCodeOf k = missing codeSnippets.TryFindByKey <| codeSnippets.LensInto (fun s -> s.content) (fun s n -> { s with content = n }) <| k\n    \n","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[{"$":0,"Item":"2deb54e7-009e-4297-b2bc-1c86d04203a4"}],"companions":[],"id":{"$":0,"Item":"987560b0-1fe6-4835-ad99-aed93db7da1a"},"expanded":true},{"name":"CodeEditorMain","content":"let noSelection cur = CodeSnippet.FetchO cur = None\nlet noSelectionVal  = Val.map noSelection currentCodeSnippetId\n\nlet codeVar  = Var.Create \"\"\nlet codeMsgs = Var.Create \"\"\n\nlet getCode () =\n    CodeSnippet.FetchO currentCodeSnippetId.Value \n    |> Option.iter (fun snp -> codeVar.Value <- snp.Code())\n\nlet compile fThen =\n    CodeSnippet.FetchO currentCodeSnippetId.Value \n    |> Option.iter (fun snp -> \n        codeMsgs.Value <- \"Processing...\"\n        let code = snp.Code()\n        codeVar.Value <- code\n        code\n        |> EditorRpc.translateClient \n        <| false\n        <| (fun (jsO, msgs) ->\n                codeMsgs.Value <-\n                    match jsO with\n                    | Some js -> try \n                                    fThen js\n                                    \"Done!\\n\" + msgs\n                                 with e -> e.ToString()\n                    | None    -> msgs\n            ))\n\nlet runJS js = \n    JS.Eval \"\"\"CIPHERSpaceLoadFilesDoAfter(function() { for (key in window) { if (key.startsWith(\"StartupCode$\")) try { window[key].$cctor(); } catch (e) {} } })\"\"\" |> ignore\n    JS.Eval js |> ignore\n\nlet reorderSnippet toId fromId =\n    let trySnippet id = tryPickI (fun (_, snp) -> snp.id = id) \n    let moving, others = codeSnippets.Value |> Seq.toArray |> Array.partition (fun snp -> snp.id = fromId || snp.IsDescendantOf fromId)\n    match trySnippet fromId moving, trySnippet toId others with\n    | Some(_, snp), Some(ti, tsn) ->\n        [| others.[0..ti - 1] ; moving ; others.[ti..] |]\n        |> Array.collect id\n        |> codeSnippets.Set\n        codeSnippets.UpdateBy (fun c -> Some { c with parent = tsn.parent }) snp.id\n    | _ -> ()\n    refreshView()\n\nlet indentCodeIn () =\n    CodeSnippet.PickIO currentCodeSnippetId.Value\n    |> Option.iter (fun (j, snp) ->\n        let rec doPriorUntil f i =\n            if i < 0 then () else\n            if codeSnippets.Value |> Seq.item i |> f then () else\n            doPriorUntil f (i - 1)\n        j - 1 |> doPriorUntil (fun pri ->\n            if pri.parent = snp.parent \n            then codeSnippets.UpdateBy (fun c -> Some { c with parent = Some pri.id }) snp.id\n                 true\n            else false\n        ) \n        refreshView()\n    )\n\nlet indentCodeOut () =\n    CodeSnippet.FetchO currentCodeSnippetId.Value\n    |> Option.iter (fun snp ->\n        let newP = snp.parent\n                   |> Option.bind CodeSnippet.FetchO\n                   |> Option.bind (fun p -> p.parent)\n        codeSnippets.UpdateBy (fun c -> Some { c with parent = newP }) snp.id\n        refreshView()\n    )\n\nlet mutable draggedId = CodeSnippetId.New\nlet inline draggable     v  = htmlAttribute \"draggable\"    v\n\nlet fileName  = Var.Create \"\"\nlet emptyFile = Val.map (fun v -> v = \"\") fileName\n\nlet loadTextFile element (f: string -> unit) =\n    let files = element |> FileList.OfElement \n    if files.Length > 0 then\n        let  reader  = TextFileReader()\n        reader.Onload <- (fun e -> f e.Target?result)\n        reader.ReadAsText files.[0] \n\nlet fileInputElementId = \"CodeEditorFileSel\"\nlet loadFile (e: Dom.Element) =\n    loadTextFile ((e.GetRootNode().FirstChild :?> Dom.Element).QuerySelector(\"#\" + fileInputElementId))\n        (fun txt ->                 \n            txt\n            |> Json.Deserialize<CodeSnippet[]>\n            |> codeSnippets.Set\n            refreshView()\n        )\n\n[< Inline \"saveAs(new Blob([$txt], {type: 'text/plain;charset=utf-8'}), $name)\" >]\nlet saveAs (txt:string) (name:string) = ()\n\nlet downloadFile() =\n    codeSnippets.Value\n        |> Seq.toArray\n        |> Json.Serialize\n        |> saveAs <| fileName.Value\n    ","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[{"$":0,"Item":"79f8f6c6-d1f5-4593-9775-60ba2863e94d"},{"$":0,"Item":"a28fe808-236e-4b7e-9509-51ebe21e35fc"},{"$":0,"Item":"987560b0-1fe6-4835-ad99-aed93db7da1a"}],"companions":[],"id":{"$":0,"Item":"07e477d3-fb6e-4c83-bb89-b4b2cce55d7b"},"expanded":true},{"name":"let listEntry code =","content":"let isDirectPredecessor pre curO =\n    curO\n    |> Option.map (fun snp -> snp.predecessors |> List.contains pre)\n    |> Option.defaultValue false\n\nlet curPredecessors =\n  currentCodeSnippetO\n  |> Val.map (   Option.map          (fun (snp:CodeSnippet) -> snp.UniquePredecesors())\n              >> Option.defaultValue [])    \n\nlet isIndirectPredecessor pre predecessors = predecessors |> List.contains pre\n    \nlet togglePredecessorForCur (pre:CodeSnippet) curO =\n    match curO with\n    | None     -> ()\n    | Some cur ->\n    if cur = pre || isIndirectPredecessor cur.id (pre.UniquePredecesors()) then () else\n    let preds = \n        if cur.predecessors |> List.contains pre.id\n        then List.filter ((<>) pre.id)\n        else fun l -> pre.id :: l\n        <| cur.predecessors\n    codeSnippets.UpdateBy  (fun c -> Some { c with predecessors = preds }) cur.id\n    refreshView()\n\nlet listEntry code =\n    Template.Hoverable.New\n        .Content( [ \n                    ``class`` \"code-editor-list-tile\"\n                    classIf   \"selected\"              <| Val.map ((=)                   code.id) currentCodeSnippetId\n                    classIf   \"direct-predecessor\"    <| Val.map (isDirectPredecessor   code.id) currentCodeSnippetO\n                    classIf   \"indirect-predecessor\"  <| Val.map (isIndirectPredecessor code.id) curPredecessors\n                    draggable \"true\"\n                    SomeAttr <| on.dragOver(fun _ ev -> ev.PreventDefault()                                              )\n                    SomeAttr <| on.drag    (fun _ _  ->                                              draggedId <- code.id)\n                    SomeAttr <| on.drop    (fun _ ev -> ev.PreventDefault() ; reorderSnippet code.id draggedId           )\n                    div     [ ``class`` \"code-editor-list-text\"\n                              style1 \"text-indent\" (sprintf \"%dem\" <| code.Level())\n                              htmlText <| Val.map2 snippetName (curSnippetNameOf code.id) (curSnippetCodeOf code.id)\n                              SomeAttr <| on.click (fun _ _ -> currentCodeSnippetId.Value <- code.id)\n                            ]\n                    span    [ ``class`` \"predecessor\" \n                              SomeAttr <| on.click(fun _ _ -> Val.iter (togglePredecessorForCur code) currentCodeSnippetO)\n                              htmlText \"X\"\n                            ]\n                    ])\n        .Render\n\n","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[{"$":0,"Item":"c7841be7-5cd5-40f3-b91c-c107b487bc0c"},{"$":0,"Item":"07e477d3-fb6e-4c83-bb89-b4b2cce55d7b"}],"companions":[],"id":{"$":0,"Item":"93f32df7-da8b-472f-8bad-e82cc58ec52b"},"expanded":true},{"name":"","content":"let addCode () =\n    CodeSnippet.PickIO currentCodeSnippetId.Value\n    |> Option.map (fun (i, snp) -> CodeSnippet.New(i + 1, \"\", snp.parent, [], [], \"\"))\n    |> Option.defaultWith (fun _ -> CodeSnippet.New \"\")\n    |> fun n -> currentCodeSnippetId.Value <- n.id\n    refreshView()\n\n\nlet deleteCode () =\n    CodeSnippet.FetchO currentCodeSnippetId.Value\n    |> Option.iter (fun snp -> \n        if JS.Confirm (sprintf \"Do you want to delete %s?\" snp.Name) then\n            currentCodeSnippetId.Value <- CodeSnippetId.New\n            codeSnippets.Remove snp\n            refreshView()\n    )","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[{"$":0,"Item":"07e477d3-fb6e-4c83-bb89-b4b2cce55d7b"}],"companions":[],"id":{"$":0,"Item":"60191ea0-da20-4fbf-96b8-3871338a66d8"},"expanded":true},{"name":"let styleEditor =","content":"let splitterV1 =\n    Template.SplitterBar.New.Value(20.0)\n      .Node(div [ ``class`` \"sliderv\"\n                  style \"width : 5px; grid-column: 2  ; grid-row: 2/4; margin-left: -7px; border: 0px; padding: 0px;\" ])\n\nlet splitterV2 =\n    Template.SplitterBar.New.Value(50.0).Max(Val.map ((-) 92.0) splitterV1.GetValue)\n      .Node(div [ ``class`` \"sliderv\"\n                  style \"width : 5px; grid-column: 3  ; grid-row: 3  ; margin-left: -7px; border: 0px; padding: 0px;\" ])\n      \nlet splitterH3 =\n    Template.SplitterBar.New.Value(17.0).Horizontal.Before\n      .Node(div [ ``class`` \"sliderh\"\n                  style \"height: 5px; grid-column: 2/4; grid-row: 3  ; margin-top : -7px; border: 0px; padding: 0px;\" ])\n\nlet styleEditorF sp1 sp2 sp3 =\n    sprintf \"\"\"\ndiv textarea {\nfont-family: monospace;\n}\n.code-editor-list-tile {\nwhite-space: nowrap; \nborder-style: solid none none;\nborder-color: white;\nborder-width: 1px;\nbackground-color: #D8D8D8;\ndisplay: flex;\n}\n.code-editor-list-text{\npadding: 1px 10px 1px 5px;\noverflow:hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\nflex: 1;\n}\n\n.code-editor-list-tile.direct-predecessor {\nfont-weight: bold;\n}\n.code-editor-list-tile.indirect-predecessor {\ncolor: blue;\n}\n.code-editor-list-tile.selected {\nbackground-color: #77F;\ncolor: white;\n}\n.code-editor-list-tile.hovering {\nbackground: lightgray;\n}\n.code-editor-list-tile.hovering.selected {\nbackground:  blue;\n}\n.code-editor-list-tile>.predecessor {\nfont-weight: bold;\nborder-style: inset;\nborder-width: 1px;\ntext-align: center;\ncolor: transparent;\n}\n.code-editor-list-tile.direct-predecessor>.predecessor {\ncolor: blue;\n}\n\n\n.CodeEditor {\n    display: grid;\n    grid-template-columns: %f%% %f%% auto;\n    grid-template-rows: 4%% auto %f%% 8%%;\n    grid-template-areas:\n    \"header0 header   header\"\n    \"sidebar content1 content1\"\n    \"sidebar content2 content3\"\n    \"footer  footer   footer2\";\n    background-color: #f1f1fd;\n    color: #444;\n    height: 90vh;\n    grid-gap: 9px;\n    padding : 9px;\n}\n\n.CodeEditor > :nth-child(2){  grid-area: header  ; overflow: hidden; }\n#Snippets                  {  grid-area: sidebar ; overflow: auto  ; }\n#Code                      {  grid-area: content1; overflow: auto  ; }\n#Output                    {  grid-area: content2; overflow: auto  ; }\n#AllCode                   {  grid-area: content3; overflow: auto  ; }\n#Buttons                   {  grid-area: footer  ;                   }\n\n\n#Buttons { \n        display: grid;\n        grid-template-columns: repeat(8, 12.5%%);\n        bxackground-color: #eee;\n        padding : 5px;\n        grid-gap: 5px;\n}\n\n#Buttons > div { grid-column: 4/9; grid-row: 2 }\n\n.CodeMirror {\n    height: 100%%;\n}\n\n.sliderv {\n    background-color: #eef;\n    cursor: col-resize;\n}\n.sliderh {\n    background-color: #eef;\n    cursor: row-resize;   \n}            \"\"\" sp1 sp2 sp3\n        \nlet styleEditor = htmlText <| Val.map3 styleEditorF splitterV1.GetValue splitterV2.GetValue splitterH3.GetValue\n","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[{"$":0,"Item":"70030378-692d-431d-bed9-c839a7f95798"}],"companions":[],"id":{"$":0,"Item":"fa5b4506-b26d-4387-8e04-ac7a5a90861a"},"expanded":true},{"name":"","content":"let CodeEditor() =\n  div [\n        ``class`` \"CodeEditor\"\n        div [ Id \"Snippets\"\n              codeSnippets.View\n              |> View.SnapshotOn codeSnippets.Value refresh.View\n              |> View.Map (Seq.map (listEntry >> renderDoc) >> Doc.Concat)\n              |> Doc.BindView id |> SomeDoc\n            ]\n        Template.Input     .New(Val.bindIRef curSnippetNameOf currentCodeSnippetId).Prefix(htmlText \"name:\")      .Render\n        Template.CodeMirror.New(Val.bindIRef curSnippetCodeOf currentCodeSnippetId).Id(\"Code\"   )                 .Render\n        Template.TextArea  .New(codeMsgs  ).Placeholder(\"Output:\"  )               .Id(\"Output\" )                 .Render\n        Template.TextArea  .New(codeVar   ).Placeholder(\"All Code:\")               .Id(\"AllCode\")                 .Render\n        div [ Id \"Buttons\"\n              Template.Button.New.Text(\"Add code\"   ).OnClick(fun _ _ -> addCode      ())                         .Render\n              Template.Button.New.Text(\"<<\"         ).OnClick(fun _ _ -> indentCodeOut()).Disabled(noSelectionVal).Render\n              Template.Button.New.Text(\">>\"         ).OnClick(fun _ _ -> indentCodeIn ()).Disabled(noSelectionVal).Render\n              Template.Button.New.Text(\"Load code\"  ).OnClick(fun e _ -> loadFile     e ).Disabled(emptyFile     ).Render\n              Template.Button.New.Text(\"Download\"   ).OnClick(fun _ _ -> downloadFile ())                         .Render\n              Template.Button.New.Text(\"Get code\"   ).OnClick(fun _ _ -> getCode      ()).Disabled(noSelectionVal).Render\n              Template.Button.New.Text(\"Execute\"    ).OnClick(fun _ _ -> compile  runJS ).Disabled(noSelectionVal).Render\n              Template.Button.New.Text(\"Compile\"    ).OnClick(fun _ _ -> compile  ignore).Disabled(noSelectionVal).Render\n              Template.Button.New.Text(\"Delete code\").OnClick(fun _ _ -> deleteCode   ()).Disabled(noSelectionVal).Render\n              Template.Input .New(fileName).Type(\"file\").Id(fileInputElementId)                                   .Render\n            ]\n        script [ src \"/EPFileX/FileSaver/FileSaver.js\" ; ``type`` \"text/javascript\"] \n        styleH [ styleEditor ]\n        splitterV1.Render\n        splitterV2.Render\n        splitterH3.Render\n     ]\ndo CodeEditor ()  |> TestCode.TestNode(\"CodeEditor\").AddBootstrap.TestHtml","parent":{"$":0,"Item":"c2188026-a06a-4963-a95a-93075e5f5b6e"},"predecessors":[{"$":0,"Item":"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"},{"$":0,"Item":"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"},{"$":0,"Item":"081bac32-e739-4124-87eb-eb7d6f2220bc"},{"$":0,"Item":"3038cd62-093c-4385-aa9b-799297bd379c"},{"$":0,"Item":"93f32df7-da8b-472f-8bad-e82cc58ec52b"},{"$":0,"Item":"60191ea0-da20-4fbf-96b8-3871338a66d8"},{"$":0,"Item":"b417f7b1-5e53-4c51-a23f-6f2c8c5a77b7"},{"$":0,"Item":"3234a0bf-4541-4f2c-8bbf-b5ab3a0e415b"},{"$":0,"Item":"b03ba35c-a03c-4bbe-a373-1ce551524e56"},{"$":0,"Item":"fa5b4506-b26d-4387-8e04-ac7a5a90861a"}],"companions":[],"id":{"$":0,"Item":"75c3d033-99b5-409f-8ecb-cd9bd8b101ab"},"expanded":true}]